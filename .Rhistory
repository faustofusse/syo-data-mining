})
t$text_inf_sing <- sapply(t$text_inf_sing, function(x){
#print(class(x))
print(x)
print(match(x, spal$palabra))
return(x)
})
t$a <- sapply(t$text_inf_sing, function(x){
#print(class(x))
print(x)
print(match(x, spal$palabra))
return(x)
})
rm(t$screen_name, t$is_retweet,)
t$screen_name <- NULL
t$is_retweet <- NULL
t$a <- sapply(t$text_inf_sing, function(x){
#print(class(x))
print(x)
return(match(x, spal$palabra))
return(x)
})
t$a <- sapply(t$text_inf_sing, function(x){
#print(class(x))
print(x)
return(match(x, spal$palabra, nomatch = NULL))
return(x)
})
t$a <- sapply(t$text_inf_sing, function(x){
#print(class(x))
print(x)
return(match(x, spal$palabra))
return(x)
})
t$a <- sapply(t$text_inf_sing, function(x) match(x, spal$palabra))
t$a1 <- sapply(t$text, function(x) match(x, spal$palabra))
t$a2 <- sapply(t$text_inf, function(x) match(x, spal$palabra))
t$a3 <- sapply(t$text_inf_sing, function(x) match(x, spal$palabra))
t$a <- NULL
t$a1 <- NULL
t$a2 <- NULL
t$a3 <- NULL
t$indexes <- sapply(t$text_inf_sing, function(x) match(x, spal$palabra))
t$indexes <- sapply(t$text_inf_sing, function(x) match(x, spal$palabra)[!is.na(x)])
t <- head(tweets)
t$indexes <- sapply(t$text_inf_sing, function(x) match(x, spal$palabra)[!is.na(x)])
t$indexes <- sapply(t$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
# Match los "text" con las palabras del sdal
tweets$indexes <- sapply(tweets$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
View(spal)
t$agrado <- sapply(t$indexes, function(x) spal$media_agrado[x])
mean(t$agrado)
t$mean <- apply(t$agrado, 1, mean)
t$mean <- apply(t$agrado, 1, mean(x))
mean(t$agrado[3])
mean(unlist(t$agrado[3]))
t$mean <-
t %>% rowwise() %>%
mutate(
Mean_price = mean(agrado)
)
t <- head(tweets)
t$indexes <- sapply(t$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
t$agrado <- sapply(t$indexes, function(x) spal$media_agrado[x])
t$mean <-
t %>% rowwise(agrado) %>%
mutate(
Mean_price = mean(agrado)
)
t <- head(tweets)
t$indexes <- sapply(t$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
t$mean <-
t <- t %>% rowwise() %>%  mutate( mean = mean(agrado) )
t$agrado <- sapply(t$indexes, function(x) spal$media_agrado[x])
t$mean <-
t <- t %>% rowwise() %>%  mutate( mean = mean(agrado) )
t$mean <-
t <- t$mean %>% rowwise() %>%  mutate( mean = mean(agrado) )
t <- head(tweets)
t$indexes <- sapply(t$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
t$agrado <- sapply(t$indexes, function(x) spal$media_agrado[x])
t$mean <- sapply(t$agrado, function(x) print(x))
t$mean <- sapply(t$agrado, function(x) print(mean(x)))
t$mean <- sapply(t$agrado, function(x) (mean(x)))
# Cargar tweets adaptados
tweets <- read.csv("~/Desktop/POSTA_R/datasets/26MAY-26JUN/ADAPTED_DATASET_20200526-20200626_500.csv") %>%
select("screen_name", "created_at", "text", "is_retweet", "text_inf", "text_inf_sing")
# Pasar los "text" a vectores
tweets$text <- sapply(strsplit(tweets$text, split = ";", fixed=TRUE), function(x) (x))
tweets$text_inf <- sapply(strsplit(tweets$text_inf, split = ";", fixed=TRUE), function(x) (x))
tweets$text_inf_sing <- sapply(strsplit(tweets$text_inf_sing, split = ";", fixed=TRUE), function(x) (x))
# Match los "text" con las palabras del sdal
tweets$agrado <- sapply(tweets$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
tweets$agrado <- sapply(t$indexes, function(x) spal$media_agrado[x])
# Match los "text" con las palabras del sdal
tweets$agrado <- sapply(tweets$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
View(tweets)
# Match los "text" con las palabras del sdal
tweets$agrado <- sapply(tweets$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
tweets$agrado <- sapply(t$agrado, function(x) spal$media_agrado[x])
tweets$agrado <- sapply(t$agrado, function(x) spal$media_agrado[x])
tweets$agrado <- sapply(t$agrado, function(x) (mean(x)))
# Match los "text" con las palabras del sdal
tweets$agrado <- sapply(tweets$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
View(tweets)
tweets$agrado <- sapply(t$agrado, function(x) spal$media_agrado[x])
tweets$agrado <- sapply(t$agrado, function(x) (mean(x)))
# Match los "text" con las palabras del sdal
tweets$agrado <- sapply(tweets$text_inf_sing, function(x) na.omit(match(x, spal$palabra)))
tweets$agrado <- sapply(tweets$agrado, function(x) spal$media_agrado[x])
tweets$agrado <- sapply(tweets$agrado, function(x) (mean(x)))
plot(tweets$mean)
plot(tweets$created_at, tweets$mean)
plot(tweets$created_at, tweets$agrado)
plot(tweets$agrado)
plot(t$agrado)
View(t)
plot(t$mean)
plot(t$mean)
verbos <- read.csv("~/Desktop/POSTA_R/datasets/jehle_verb_database.csv")
verbos <- read.csv("~/Desktop/POSTA_R/datasets/verbs/jehle_verb_database.csv")
verbos <- verbos %>% select("infinitive", "form_1s", "form_2s", "form_3s", "form_1p", "form_2p", "form_3p", "gerund", "pastparticiple")
verbos <- unite(verbos, form_1s, form_2s, form_3s, form_1p, form_2p, form_3p, col = "forms") # gerund, pastparticiple,
verbos$forms <- sapply(verbos$forms, function(x) (strsplit(x, split = "_", fixed=TRUE)))
View(verbos)
tiene_verbos_compuestos <- function(x){
for (v in x){
temp<-unlist((strsplit(v, split = " ", fixed = TRUE)), use.names=FALSE)
if(length(temp) > 1) return(TRUE)
}
return(FALSE)
}
verbos$forms <- sapply(verbos$forms, function(x){
if (tiene_verbos_compuestos(x)) return(NA)
else return(x)
})
verbos <- filter(verbos, !is.na(forms))
verbos <- verbos %>% rowwise() %>% mutate(forms = list(c(forms, gerund, pastparticiple)))
verbos <- verbos %>% select("infinitive", "forms")
verbos <- verbos %>% group_by(infinitive) %>% summarise_all(funs(list(na.omit(.))))
verbos <- verbos %>% rowwise() %>% mutate(forms = list(unlist(forms)))
verbos <- read.csv("~/Desktop/POSTA_R/datasets/verbs/jehle_verb_database.csv")
verbos <- verbos %>% select("infinitive", "form_1s", "form_2s", "form_3s", "form_1p", "form_2p", "form_3p", "gerund", "pastparticiple")
verbos <- unite(verbos, form_1s, form_2s, form_3s, form_1p, form_2p, form_3p, col = "forms") # gerund, pastparticiple,
verbos$forms <- sapply(verbos$forms, function(x) (strsplit(x, split = "_", fixed=TRUE)))
tiene_verbos_compuestos <- function(x){
for (v in x){
temp<-unlist((strsplit(v, split = " ", fixed = TRUE)), use.names=FALSE)
if(length(temp) > 1) return(TRUE)
}
return(FALSE)
}
verbos$forms <- sapply(verbos$forms, function(x){
if (tiene_verbos_compuestos(x)) return(NA)
else return(x)
})
verbos <- filter(verbos, !is.na(forms))
verbos <- verbos %>% rowwise() %>% mutate(forms = list(c(forms, gerund, pastparticiple)))
verbos <- verbos %>% select("infinitive", "forms")
verbos <- verbos %>% group_by(infinitive) %>% summarise_all(funs(list(na.omit(.))))
t <- tweets %>% select("created_at", "agrado")
format(as.POSIXct(t$agrado,format='%m/%d/%Y %H:%M:%S'),format='%m/%d/%Y')
format(as.POSIXct(t$agrado,format='%m/%d/%Y %H:%M:%S'),format='%m/%d/%Y')
t$created_at <- gsub(x= t$created_at, pattern=" 0:00:00",replacement="",fixed=T)
View(t)
rm(verbos)
rm(tiene_verbos_compuestos())
rm(tiene_verbos_compuestos
rm(tiene_verbos_compuestos)
rm(tiene_verbos_compuestos)
t$created_at <- sapply(t$created_at, function(x) substr(x,1,nchar(x)-7))
t <- tweets %>% select("created_at", "agrado")
t$created_at <- sapply(t$created_at, function(x) substr(x,1,nchar(x)-9))
t$created_at <- sapply(t$created_at, function(x) substr(x,1,nchar(x)-10))
t <- tweets %>% select("created_at", "agrado")
t$created_at <- sapply(t$created_at, function(x) substr(x,1,nchar(x)-10))
t$created_at <- sapply(t$created_at, function(x) substr(x,1,nchar(x)-9))
t <- tweets %>% select("created_at", "agrado")
t$created_at <- sapply(t$created_at, function(x) substr(x,1,nchar(x)-9))
t <- t %>% group_by(created_at) %>% summarise_all(funs(list(na.omit(.))))
t$mean <- sapply(t$mean, function(x) (mean(x)))
t$mean <- sapply(t$agrado, function(x) (mean(x)))
plot(t$mean)
plot(t$mean, t$created_at)
plot(t$mean)
barplot(t$mean)
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
rm(cylinders)
p <- t$mean
barplot(p)
plot(p)
p<-table(t$mean)
plot(p)
barplot(p)
hist(t$mean)
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
summary(t$mean)
curve(dnorm(t$mean))
curve(t$mean, lwd = 2, add = TRUE)
curve(function(x) (t$mean), lwd = 2, add = TRUE)
# Add a normal distribution
curve(dnorm(x, mean = mean(t$agrado), sd = sd(t$agrado)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t), sd = sd(t)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
?lines
lines(t$mean)
lines(density(t$mean, adjust = 3), col = "purple", lwd = 2)
lines(t$mean)
lines(t$mean, add = FALSE)
lines(t$mean)
lines(density(t$mean))
# Add a rug plot
rug(t$mean, lwd = 2, col = "gray")
barplot(t$mean)
barplot(t$mean, height = 3)
barplot(t$mean)
barplot(t$mean, height = 8)
barplot(t$mean)
lines(density(t$mean), col = "blue", lwd = 2)
lines(t$mean)
lines(t$mean, lwd = 1)
lines(t$mean, lwd = 5)
plot(t$mean)
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
plot(t$mean)
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
lines(t$mean)
lines(density(t$mean))
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
library(datasets)  # Load/unload base packages manually
head(lynx)
lines(density(t$mean, adjust = 3))
lines(density(t$mean, adjust = 31))
lines(density(t$mean, adjust = 5))
lines(density(t$mean, adjust = 6))
lines(density(t$mean, adjust = 9))
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
hist(t$mean)
hist(t)
hist(t$agrado)
hist(t$mw)
hist(t$mean)
clear
X <- seq(from = 5, to = 5, length.out = 1000)
f.X <- dnorm(X)
plot(X, f.X, type="1", color = "red")
plot(X, f.X, color = "red")
plot(X, f.X, color = "red", type = "l")
plot(X, f.X, color = "red", type = "l")
plot(X, f.X, color = "red", type = "l", lwd = 3)
plot(dnorm)
plot(dnorm(t$mean))
?plot
plot((0:31), t$mean)
plot((0:31), t$mean, type = "b")
plot((0:31), t$mean, type = "b", color="red")
plot((0:31), t$mean, type = "b")
plot((0:31), t$mean, type = "l")
plot((0:31), dnorm(t$mean), type = "l")
?plot
?curve
curve(dnorm(t$mean), from=0, to=31)
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
curve(dnorm(t), add=TRUE)
curve(dnorm(t$mean), add=TRUE)
curve(t$mean, add=TRUE)
curve(function(x) t$mean[x], add=TRUE)
curve(function(x) (t$mean[x]), add=TRUE)
curve(function(x) (t$mean[x]), add=TRUE, n=31)
curve(qnorm(t$mean))
# Add a normal distribution
curve(dnorm(x, mean = t$mean),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = t$mean),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = t$mean, sd=sd(x)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(qnorm(x, mean = t$mean, sd=sd(x)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = t$mean, sd=sd(x)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(t$mean, adjust = 3), col = "purple", lwd = 2)
# Add a rug plot
rug(t$mean, lwd = 2, col = "gray")
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado")
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado",
type = "l")
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado",
type = "b")
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE, from = 0, to=31)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE, from = 2.1, to=2.25)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE, from = 2.1, to=2.25)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(t$mean, adjust = 3), col = "purple", lwd = 2)
barplot(t$mean)
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE, from = 2.1, to=2.25)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "red",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE, from = 2.1, to=2.25)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "red",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(t$mean), sd = sd(t$mean)),
col = "red",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add a normal distribution
curve(dnorm(x, mean = mean(unlist(t$mean)), sd = sd(unlist(t$mean))),
col = "red",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(t$mean, adjust = 3), col = "purple", lwd = 2)
# Add a rug plot
rug(t$me, lwd = 2, col = "gray")
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado",
type = "b")
barplot(t$mean)
plot(t$mean)
barplot(t$mean)
?barplot
curve(sapply(x, function(e) mean(var + e)))
plot(t$mean,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "Agrado en los tweets del ultimo mes",
xlab = "Dia (25/05 al 25/06)",
ylab = "Agrado",
type = "b")
curve(sapply(t$agrado, function(x) (mean(x))))
View(tweets)
curve(sapply(x, function(e) mean(t$mean + e)))
curve(sapply(x, function(e) mean(t$agrado + e)))
curve(sapply(x, function(e) mean(t$mean + e)))
curve(sapply(x, function(e) mean(t$mean + e)), to = 31)
plot(seq(-4,4,.01),xx)
plot(seq(-4,4,.01),x)
dnorm(10)
dnorm(100)
dnorm(1000)
dnorm(10000)
dnorm(10000)x1
rnorm(10)
rnorm([10,3,3,4,5])
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm([10,3,3,4,5])
rnorm([10,3,3,4,5])
rnorm([10,3,3,4,5])
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
rnorm(c(10,3,3,4,5))
qnorm(c(10,3,3,4,5))
qnorm(3)
qnorm(t$mean)
qnorm(x, mean = t$mean)
qnorm(x, mean = t$mean[x])
qnorm(x, mean = t$agrado[x])
